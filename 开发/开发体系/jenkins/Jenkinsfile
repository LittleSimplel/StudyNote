def projectName = "zyd-xtabd-back-center"
def projectPath = "zyd/zyd-xtabd-back-center"
def port = "9028"
def ssh_deploy = "192.168.10.43"

def tag = "latest"
def harbor_url = "192.168.10.45:85"
def harbor_user = "admin"
def harbor_password = "Harbor12345"
def harbor_base_name = "hntsg"
def harbor_auth = "bdf1afdc-6384-48d3-becc-eaba2bc522f1"

node {
    def mvnHome
    stage('git') { // for display purposes
       checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '181b2f5f-0615-4964-8ecf-a712b4f92247', url: 'https://codehub.devcloud.huaweicloud.com/hntsgdzdsjzhptxm00002/zyd-xtabd-java.git']]])
    }
        stage('编译，安装公共子工程') {
         echo '编译，安装公共子工程.....'
      // sh "mvn clean install"
         sh "mvn -f zyd/zyd-xtabd-entity clean install"
         sh "mvn -f zyd/zyd-xtabd-common clean install"
      }
        stage('编译，打包微服务工程，上传镜像') {
             echo '编译，打包微服务工程，上传镜像'
             sh "mvn -f ${projectPath} clean package -Dmaven.test.skip=true dockerfile:build"
             echo '生成镜像完成'

             echo '对镜像打上标签'
             sh "docker tag ${projectName}:${tag} ${harbor_url}/${harbor_base_name}/${projectName}:${tag}"

             //把镜像推送到Harbor
             echo '把镜像推送到Harbor'
             withCredentials([usernamePassword(credentialsId: "${harbor_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                 //登录到Harbor
                 sh "docker login -u ${username} -p ${password} ${harbor_url}"
                 //镜像上传
                 sh "docker push ${harbor_url}/${harbor_base_name}/${projectName}:${tag}"
                 sh "echo 镜像上传成功"
             }
             //删除本地镜像
             echo '删除本地镜像'
             sh "docker rmi -f ${projectName}:${tag}"
             sh "docker rmi -f ${harbor_url}/${harbor_base_name}/${projectName}:${tag}"

             echo '开始远程部署'
             sh "ssh ${ssh_deploy} 'sh /deploy.sh ${harbor_url} ${harbor_base_name} ${projectName} ${tag} ${port}'"
			 echo '远程部署结束'
             // sshPublisher(publishers: [sshPublisherDesc(configName: 're_dploy_host', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sh /deploy.sh $harbor_url $harbor_base_name $projectName $tag $port', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        }
}
